>Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

A: sort returns the file while organizing it alphabetically by line: 

------------------------------------------------------------------------------
	$ sort commands.js
	           done(data);
	           if (err) throw err;
	        break;
	       });
	       const fileName = fullPath[0];
	       fs.readFile(fileName, (err, data) => {
	     process.stdout.write('\nprompt > ');
	     process.stdout.write(output);
	        commandLibrary.cat(userInputArray.slice(1));
	                break;
	                commandLibrary.echo(userInputArray.slice(1).join(" "));
	        case "cat":
	        case "echo":
	   }
	   }
	   const command = userInputArray[0];
	   const userInputArray = userInput.split(" ");
	   switch(command) {
	  //parses the user input to understand which command was typed
	                done(userInput);
	        "cat": function(fullPath) {
	        "echo": function(userInput) {
	        //the cat command
	        //the echo command
	        },
	 }
	 }
	 };
	 const commandLibrary = {
	 function done(output) {
	 function evaluateCmd(userInput) {
	 module.exports.commandLibrary = commandLibrary;
	 module.exports.evaluateCmd = evaluateCmd;





	//where we will store our commands
	//where we will store the logic of our commands
	//write out data
	const fs = require("fs");
	------------------------------------------------------------------

wc prints out the number of lines, words and byte counts for a file 
-----------------
	41  106 1064 commands.js
------------------

uniq sorts each line in a file and deletets a line if it is the same as a line above it

-------------------------------------------------------------------------------------------
	$ uniq commands.js
	const fs = require("fs");

	//write out data
	 function done(output) {
	     process.stdout.write(output);
	     process.stdout.write('\nprompt > ');
	 }

	//where we will store our commands
	 function evaluateCmd(userInput) {
	  //parses the user input to understand which command was typed
	   const userInputArray = userInput.split(" ");
	   const command = userInputArray[0];

	   switch(command) {
	        case "echo":
	                commandLibrary.echo(userInputArray.slice(1).join(" "));
	                break;
	        case "cat":
	        commandLibrary.cat(userInputArray.slice(1));
	        break;
	   }
	 }

	//where we will store the logic of our commands
	 const commandLibrary = {
	        //the echo command
	        "echo": function(userInput) {
	                done(userInput);
	        },
	        //the cat command
	        "cat": function(fullPath) {
	       const fileName = fullPath[0];
	       fs.readFile(fileName, (err, data) => {
	           if (err) throw err;
	           done(data);
	       });
	   }
	 };

	 module.exports.commandLibrary = commandLibrary;
	 module.exports.evaluateCmd = evaluateCmd;
 -------------------------------------------------------------------------------

 >Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.


 So I ran a few commands:

 -----------------------------
 echo "bash is fun" | wc
 -----------------------------

 which outputted : 1   3  12

 I also ran 

 -----------------------------
 echo "bash is fun" | wc | wc
 -----------------------------

which outputted 1 3 24. 

So the out put give us a line, word and byte counts. When I tested other strings I would always end up with a byte count of 24 on the second iteration of wc and subsequent calls of wc wouldn't alter that. At first I wasn't sure why but then I though about what the second wc is being called on: the output of the first wc. Which is a standard format: x   x   xx, so calling wc on that string will always result in the same result: 1 line, 3 words, and 24 bytes. 

Also did: 
-------------
cat commands.js | pbcopy
---------

which takes the contents of the commands.js file and copies them to the clipboard. 

>6. Reverse a string. 

--------------------------------------------------
function reverseString (input){
  let cutter = input.split(' ');
  let finished = [];
  cutter.forEach((element)=>{
    let item = element.split('').reverse();
    item = item.join('');
    finished.push(item)
  });
  finished = finished.join(' ');
  return finished;
  
};
-------------------------------------------------------


